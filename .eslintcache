[{"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\index.js":"1","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\App.js":"3","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Navbars\\TopNavbar.jsx":"4","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Navbars\\SimpleNav.jsx":"5","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Sidebars\\Sidebar.jsx":"6","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\Mainview.jsx":"7","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Forms\\FirstProgram.jsx":"8","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\ProgramAccordian.jsx":"9","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\variables.js":"10","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Formio\\FormEdit\\FormEdit.jsx":"11","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Formio\\FormEdit\\Form.jsx":"12","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Modals\\AddNewProjectModal.jsx":"13","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\FormView.jsx":"14","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\postRequests.js":"15","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\url.js":"16","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\GoalAccordian.jsx":"17","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\ProjectAccordian.jsx":"18","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\getRequests.js":"19","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\KpiAccordian.jsx":"20","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\AddFirstKpi.jsx":"21"},{"size":372,"mtime":1609239047523,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":14068,"mtime":1611213838343,"results":"25","hashOfConfig":"23"},{"size":3111,"mtime":1609228896248,"results":"26","hashOfConfig":"23"},{"size":2204,"mtime":1609840678138,"results":"27","hashOfConfig":"23"},{"size":5130,"mtime":1611236402836,"results":"28","hashOfConfig":"23"},{"size":3797,"mtime":1611210567662,"results":"29","hashOfConfig":"23"},{"size":1114,"mtime":1610607512121,"results":"30","hashOfConfig":"23"},{"size":6447,"mtime":1611236319567,"results":"31","hashOfConfig":"23"},{"size":25953,"mtime":1609417398884,"results":"32","hashOfConfig":"23"},{"size":2384,"mtime":1611137275250,"results":"33","hashOfConfig":"23"},{"size":1382,"mtime":1611137261214,"results":"34","hashOfConfig":"23"},{"size":1207,"mtime":1609999837397,"results":"35","hashOfConfig":"23"},{"size":2425,"mtime":1611210139090,"results":"36","hashOfConfig":"23"},{"size":1242,"mtime":1611138851341,"results":"37","hashOfConfig":"23"},{"size":1054,"mtime":1611234564056,"results":"38","hashOfConfig":"23"},{"size":8501,"mtime":1611235851173,"results":"39","hashOfConfig":"23"},{"size":8178,"mtime":1611215306944,"results":"40","hashOfConfig":"23"},{"size":197,"mtime":1610975565809,"results":"41","hashOfConfig":"23"},{"size":4980,"mtime":1611209690335,"results":"42","hashOfConfig":"23"},{"size":2872,"mtime":1611126022625,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1m8vr8y",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"47"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"47"},"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\index.js",["99"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n",["100","101"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\App.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"\nimport Navbar from './components/Navbars/SimpleNav.jsx'\nimport Sidebar from './components/Sidebars/Sidebar.jsx'\nimport MainView from './views/Mainview.jsx'\nimport React from 'react';\nimport axios from \"axios\";\nimport FormEdit from './components/Formio/FormEdit/FormEdit.jsx'\nimport FormView from './views/FormView'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './style.css'\nimport { saveForm, addNewProgram, addNewProject, addNewGoal, addNewObjective, addNewKpi, saveKpiFormDefinition } from './apiRequests/postRequests'\nimport { getAllPrograms } from './apiRequests/getRequests'\n\n\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      programs: [],\n      activeProject: {},\n      activeProgram: {},\n      count: 0,\n      mainContent: '',\n      activeObjectiveId: ''\n    };\n    this.handleAddProgram = this.handleAddProgram.bind(this)\n    this.handleAddProject = this.handleAddProject.bind(this)\n    this.handleProjectChange = this.handleProjectChange.bind(this)\n    // this.handleFormSave = this.handleFormSave.bind(this)\n    // this.handleUpdateForm = this.handleUpdateForm.bind(this)\n    this.handleAddGoal = this.handleAddGoal.bind(this)\n    this.handleAddProjectObjective = this.handleAddProjectObjective.bind(this)\n    this.handleObjectiveChange = this.handleObjectiveChange.bind(this)\n    this.handleAddKpi = this.handleAddKpi.bind(this)\n    this.handleKpiFormSave = this.handleKpiFormSave.bind(this)\n    //this.handleChangeActiveObjective = this.handleChangeActiveObjective.bind(this)\n\n  }\n\n  componentDidMount() {\n    getAllPrograms().then(res => {\n      this.setState({ programs: res.data.programs })\n    }).catch(err => {\n      console.log('Error Fetching All Programs')\n    })\n  }\n\n\n  // {pid:1 ,name : 'Microsoft IT Classes',projects: [{id:1, name:\"Machine Learning\"},{id:2, name: \"Web Development\"}], isActive: false},\n  //                {pid:2 ,name : 'Skills for 2020',projects: [{id:1, name:\"CNC Machine Training\"},{id:2, name: \"Stitching\"}], isActive: false}\n\n  handleProjectChange(program, project) {\n\n    let mainContentView;\n    if (!(this.isEmpty(project))) {\n\n      if (this.isEmpty(project.form)) {\n\n        mainContentView = <FormEdit activeProgram={program} activeProject={project} saveForm={this.handleFormSave} />;\n      } else {\n\n        mainContentView = <FormView activeProgram={program} activeProject={project} updateForm={this.handleUpdateForm} />\n      }\n\n    }\n\n    this.setState({ activeProject: project, activeProgram: program, mainContent: mainContentView })\n  }\n\n  handleObjectiveChange(data) {\n    console.log('I am in App.js : handle Objective change')\n    console.log(data.objective._id)\n    let mainContentView;\n    mainContentView = <MainView data={data} addKpi={this.handleAddKpi} saveKpiForm={this.handleKpiFormSave} />\n    this.setState({ mainContent: mainContentView, activeObjectiveId: data.objective._id })\n  }\n\n\n  // handleChangeActiveObjective(id) {\n  //   console.log('I am in change Active Objective : about to set the state')\n  //   console.log(id)\n  //   this.setState({ activeObjectiveId: id })\n\n  // }\n\n  handleAddProgram(program) {\n\n    addNewProgram(program).then(res => {\n      if (res.data.success) {\n        var programs = []\n        programs = this.state.programs\n        var count = this.state.count\n        program = res.data.program\n        program.pid = count\n        count++\n        programs.push(program)\n        this.setState({ programs: programs, count: count })\n        console.log(this.state.programs)\n\n      } else {\n        console.log('Could Not Insert Program')\n      }\n    }).catch(err => {\n      console.log('Could Not Add Program in to the database : ' + err)\n    })\n\n  }\n\n  // handleFormSave(form) {\n  //   var newActiveProg = {}, newActiveProj = {};\n  //   let programs = this.state.programs.map(program => {\n  //     if (program.name === this.state.activeProgram.name) {\n  //       program.projects.forEach((proj) => {\n  //         if (proj.name === this.state.activeProject.name) {\n  //           proj.form = form\n  //           newActiveProg = program;\n  //           newActiveProj = proj\n  //         }\n  //       }\n  //       )\n  //     }\n\n  //     return program\n  //   })\n\n  //   saveForm(newActiveProg).then(res => {\n  //     // Need To send to the server\n  //     console.log('I am about to get the response')\n  //     console.log(res.data)\n  //     let mainContentView;\n  //     mainContentView = <FormView activeProgram={newActiveProg} activeProject={newActiveProj} updateForm={this.handleUpdateForm} />\n  //     this.setState({ programs: programs, activeProject: newActiveProj, activeProgram: newActiveProg, mainContent: mainContentView })\n\n  //   })\n  //     .catch(err => {\n  //       console.log(err)\n  //     })\n\n  // }\n\n\n\n  // handleFormSave(form) {\n  //   var newActiveProg = {}, newActiveProj = {};\n  //   var postData = {\n  //     programId: this.state.activeProgram._id,\n  //     project: this.state.activeProject,\n  //     form: form\n  //   }\n  //   saveForm(postData).then(res => {\n  //     // Need To send to the server\n  //     console.log('I am about to get the response : handleForm Save')\n  //     console.log(res.data)\n  //     console.log('Active Proj')\n  //     console.log(this.state.activeProject)\n  //     console.log('Active Program')\n  //     console.log(this.state.activeProgram)\n  //     let project = res.data.project\n\n\n  //     let programs = this.state.programs.map(program => {\n\n  //       if (program._id == this.state.activeProgram._id) {\n  //         program.projects.forEach((proj) => {\n\n  //           if (proj._id == project._id) {\n  //             console.log('I am innn')\n  //             console.log(proj)\n  //             console.log(res.data.project)\n  //             proj.form = form\n  //             newActiveProg = program;\n  //             newActiveProj = proj\n  //           }\n  //         }\n  //         )\n  //       }\n\n  //       return program\n  //     })\n\n  //     let mainContentView;\n  //     mainContentView = <FormView activeProgram={newActiveProg} activeProject={newActiveProj} updateForm={this.handleUpdateForm} />\n  //     this.setState({ programs: programs, activeProject: newActiveProj, activeProgram: newActiveProg, mainContent: mainContentView })\n\n  //   })\n  //     .catch(err => {\n  //       console.log(err)\n  //     })\n  // }\n\n\n  // handleUpdateForm(program, project) {\n  //   /// might be the need to update the active state\n  //   let mainContentView = <FormEdit activeProgram={program} activeProject={project} saveForm={this.handleFormSave} />;\n  //   this.setState({ mainContent: mainContentView })\n\n  //   console.log(this.state)\n  // }\n\n\n  handleAddGoal(program, goal) {\n    let data = {\n      programId: program._id,\n      goal: goal\n    }\n    // Api call handle saving of new Goal\n    addNewGoal(data).then(res => {\n      if (res.data.success) {\n        let goal = res.data.goal\n        var programs = this.state.programs.map(prog => {\n          if (prog._id == program._id) {\n            prog.goals.push(goal)\n          }\n          return prog\n        })\n\n        this.setState({ programs: programs })\n        console.log(this.state.programs)\n      } else {\n        console.log('Api Returned Status False')\n      }\n\n    }\n    )\n  }\n\n  handleAddProject(program, project, goal) {\n    var postData = {\n      project: project,\n      programId: program._id,\n      goal: goal\n    }\n\n    addNewProject(postData).then(res => {\n      if (res.data.success) {\n        project = res.data.project\n        project._id = res.data.project._id\n\n        // logic to add project in a specific goal of a program\n        let programs = this.state.programs.map(prog => {\n          if (prog._id == program._id) {\n            prog.goals.forEach(gol => {\n              if (gol._id == goal._id) {\n                gol.projects.push(project)\n              }\n            })\n          }\n          return prog\n        })\n\n        this.setState({ programs: programs })\n\n      } else {\n        console.log('Api Returned Success False')\n      }\n    })\n  }\n\n\n  handleAddProjectObjective(data) {\n\n    var goal = data.goal\n    var project = data.project;\n    var program = data.program;\n\n\n    var postData = {\n      project: project,\n      programId: program._id,\n      goal: goal,\n      objective: data.objective\n    }\n\n\n    addNewObjective(postData).then(res => {\n      var objective = res.data.objective\n\n      let programs = this.state.programs.map(prog => {\n        if (prog._id == program._id) {\n          prog.goals.forEach(gol => {\n            if (gol._id == goal._id) {\n              gol.projects.forEach(proj => {\n                if (proj._id == project._id) {\n                  proj.objectives.push(objective)\n                }\n\n              })\n            }\n\n          })\n        }\n\n        return prog\n      })\n\n      this.setState({ programs: programs })\n      console.log(this.state.programs)\n\n    }).catch(err => {\n      console.log('Error Sending Request to Add Objective')\n    })\n\n  }\n\n  handleAddKpi(data) {\n\n    var payload = {\n      kpi: data.kpi,\n      programId: data.program._id,\n      projectId: data.project._id,\n      objectiveId: data.objective._id,\n      goalId: data.goal._id\n    }\n\n    addNewKpi(payload).then(res => {\n      if (res.data.success) {\n        //   getAllPrograms().then(response => {\n        //     console.log('I am about to display all programs')\n        //     console.log(response.data.programs)\n\n        //     let mainContentView = <MainView program={data.program} project={data.project} goal={data.goal} objective={updatedObjective} addKpi={this.handleAddKpi} />\n        //     this.setState({ programs: response.data.programs, mainContent: mainContentView })\n        //   }).catch(err => {\n        //     console.log('Error Fetching All Programs')\n        //   })\n        // } else {\n        //   console.log('Api Returned Success False')\n        // }\n        var updatedObjective\n        var newKpi = res.data.kpi\n        let programs = this.state.programs.map(prog => {\n          if (prog._id == data.program._id) {\n            prog.goals.forEach(gol => {\n              if (gol._id == data.goal._id) {\n                gol.projects.forEach(proj => {\n                  if (proj._id == data.project._id) {\n                    //proj.objectives.push(objective)\n                    proj.objectives.forEach(obj => {\n                      if (obj._id == data.objective._id) {\n                        obj.kpis.push(newKpi)\n                        updatedObjective = obj\n                      }\n                    })\n                  }\n\n                })\n              }\n\n            })\n          }\n\n          return prog\n        })\n        // Program,project goal data will not be consistent, Need to think about it (solution is costly)\n        var newData = {\n          program: data.program,\n          project: data.project,\n          goal: data.goal,\n          objective: updatedObjective\n        }\n\n        let mainContentView = <MainView data={newData} addKpi={this.handleAddKpi} saveKpiForm={this.handleKpiFormSave} />\n        this.setState({ programs: programs, mainContent: mainContentView })\n\n      }\n\n    }).catch(err => {\n      console.log('Error Sending Request to Add Objective' + err)\n    })\n  }\n\n  handleKpiFormSave(data) {\n\n    var payload = {\n      programId: data.programId,\n      projectId: data.projectId,\n      goalId: data.goalId,\n      objectiveId: data.objectiveId,\n      kpiId: data.kpiId,\n      formDefinition: data.formDefinition\n    }\n    saveKpiFormDefinition(payload).then(res => {\n      if (res.data.success) {\n        var updatedObjective;\n        let programs = this.state.programs.map(prog => {\n          if (prog._id == data.program._id) {\n            prog.goals.forEach(gol => {\n              if (gol._id == data.goal._id) {\n                gol.projects.forEach(proj => {\n                  if (proj._id == data.project._id) {\n                    //proj.objectives.push(objective)\n                    proj.objectives.forEach(obj => {\n                      if (obj._id == data.objective._id) {\n                        obj.kpis.forEach(kpi => {\n                          if (kpi._id == data.kpiId) {\n                            kpi.formDefinition = res.data.formDefinition\n                            updatedObjective = obj\n                          }\n                        })\n                        //updatedObjective = obj\n                      }\n                    })\n                  }\n\n                })\n              }\n\n            })\n          }\n\n          return prog\n        })\n\n\n        // Program,project goal data will not be consistent, Need to think about it (solution is costly)\n        var newData = {\n          program: data.program,\n          project: data.project,\n          goal: data.goal,\n          objective: updatedObjective\n        }\n\n        let mainContentView = <MainView data={newData} addKpi={this.handleAddKpi} saveKpiForm={this.handleKpiFormSave} />\n        this.setState({ programs: programs, mainContent: mainContentView })\n\n      } else {\n        console.log('Server Returned Status False for save Form Definition')\n      }\n\n    }).catch(err => {\n\n      console.log('Could Not Save Form Api Error' + err)\n    })\n\n  }\n\n  // checks if an object is empty\n  isEmpty(obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key))\n        return false;\n    }\n    return true;\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div>\n          <Sidebar programs={this.state.programs} activeObjectiveId={this.state.activeObjectiveId} addObjective={this.handleAddProjectObjective} changeProject={this.handleProjectChange} addGoal={this.handleAddGoal} addProgram={this.handleAddProgram} addProject={this.handleAddProject} changeObjective={this.handleObjectiveChange} />\n          <div className=\"content\">\n            {\n\n              this.state.mainContent\n              // mainContent\n\n            }\n          </div>\n        </div>\n      </React.Fragment>\n\n    )\n  }\n\n}\n\nexport default App;\n","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Navbars\\TopNavbar.jsx",[],["122","123"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Navbars\\SimpleNav.jsx",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Sidebars\\Sidebar.jsx",["124","125","126","127"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\Mainview.jsx",["128"],"import React, { Component } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport KpiAccordian from '../components/Accordians/KpiAccordian'\r\nimport AddFirstKpiView from './AddFirstKpi'\r\nimport './style.css'\r\n\r\n\r\nclass MainView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isActive: false,\r\n            kpiInputModal: '',\r\n            showModal: false\r\n        }\r\n\r\n        this.handleAccordianClick = this.handleAccordianClick.bind(this);\r\n        this.handleAddNewKpi = this.handleAddNewKpi.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n        this.handleCross = this.handleCross.bind(this)\r\n        this.handleAddNewKpiClick = this.handleAddNewKpiClick.bind(this)\r\n\r\n    }\r\n\r\n    handleAddNewKpi(event) {\r\n        event.stopPropagation()\r\n        // data contains program, project, goal and objective\r\n        var data = this.props.data;\r\n        data.kpi = this.state.kpiInputModal;\r\n        this.props.addKpi(data)\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleClose(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleCross() {\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleAddNewKpiClick(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: true })\r\n\r\n    }\r\n\r\n    handleAccordianClick(event) {\r\n        event.stopPropagation()\r\n        let activeStatus = (this.state.isActive) ? false : true\r\n        this.setState({ isActive: activeStatus })\r\n    }\r\n\r\n    render() {\r\n        var objective = this.props.data.objective\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleCross}>\r\n                    <Modal.Header >\r\n                        <Modal.Title>Add KPI</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"round-corners\"\r\n                            placeholder=\"Add KPI Title\"\r\n                            onChange={(e) => { e.stopPropagation(); this.setState({ kpiInputModal: e.target.value }) }}\r\n                            onClick={(e) => { e.stopPropagation() }}\r\n\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={(e) => this.handleClose(e)}>\r\n                            Close\r\n                </Button>\r\n                        <Button variant=\"primary\" onClick={(e) => this.handleAddNewKpi(e)} >\r\n                            Add\r\n                </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                {\r\n\r\n                    (objective.kpis.length == 0) ? <AddFirstKpiView data={this.props.data} addKpi={this.props.addKpi} /> :\r\n\r\n                        <div>\r\n                            <div className='kpi-header'>Key Performance Indexes (KPIS)</div>\r\n                            <div className='add-kpi-div' ><button type=\"button\" className=\"btn btn-primary border-3 add-kpi-button\" onClick={(e) => this.handleAddNewKpiClick(e)} style={{ borderRadius: '10px' }} > <i className=\"fas fa-plus\" aria-hidden=\"true\" ></i> New Kpi</button> </div>\r\n                            {\r\n                                objective.kpis.map(kpi => {\r\n                                    return (<KpiAccordian key={kpi._id} data={this.props.data} kpi={kpi} saveKpiForm={this.props.saveKpiForm} />)\r\n                                })\r\n\r\n                            }\r\n                        </div>\r\n\r\n                }\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainView;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Forms\\FirstProgram.jsx",["129","130","131"],"\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport '../style.css'\r\n\r\n\r\nexport default function FirstProgram(props) {\r\n\r\n  const [programName, setProgramName] = useState({ programName: \"\" })\r\n\r\n  // To avoid Page reloading on form submit \r\n  const preventDefault = (e) => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  const addProgram = (programName) => {\r\n    props.hideAddProgramForm()\r\n    props.addProgram({ name: programName.programName })\r\n\r\n  }\r\n\r\n  // No essential need\r\n  useEffect(() => {\r\n\r\n  })\r\n\r\n  return (\r\n    <form style={{ textAlign: 'center', padding: '5%' }} onSubmit={preventDefault}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"round-corners\"\r\n        placeholder=\"Add Your Program\"\r\n        onChange={(e) => { setProgramName({ ...programName, programName: e.target.value }) }}\r\n\r\n      />\r\n\r\n      <Button variant=\"primary\" className=\"add-button\" onClick={() => addProgram(programName)}>Add</Button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// export default firstProgram;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\ProgramAccordian.jsx",["132","133","134"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\variables.js",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Formio\\FormEdit\\FormEdit.jsx",["135","136","137"],"import { React, Component } from 'react';\r\nimport { FormEdit } from 'react-formio';\r\nimport Form from './Form.jsx'\r\nimport Formio from 'formiojs';\r\nimport axios from \"axios\";\r\nimport { Redirect } from 'react-router-dom';\r\nclass FrmEdit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            redirect: false,\r\n            form: {}\r\n        }\r\n        this.saveForm = this.saveForm.bind(this);\r\n        this.isEmpty = this.isEmpty.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    saveForm(form) {\r\n        console.log(\"Form Data is below\")\r\n        // Send a POST request\r\n        // axios({\r\n        //     method: 'post',\r\n        //     url: 'https://api.appilizer.com/frontend/form',\r\n        //     data: form\r\n        // })\r\n        //     .then(res => {\r\n        //         console.log('Response Received')\r\n        //         console.log(res.data)\r\n        //         this.setState({\r\n        //             redirect: true,\r\n        //             form: res.data.Response\r\n        //         })\r\n\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err)\r\n        //     })\r\n\r\n        this.setState({\r\n            redirect: true,\r\n            form: form\r\n        })\r\n\r\n\r\n    }\r\n\r\n    // checks if an object is empty\r\n    isEmpty(obj) {\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.redirect) {\r\n            this.props.saveForm(this.state.form)\r\n            // this.setState({ form: {} })\r\n            return <Form form={this.state.form} />\r\n\r\n        } else {\r\n\r\n            let form;\r\n            if (!(this.isEmpty(this.props.activeProject.form))) {\r\n                form = this.props.activeProject.form\r\n            } else {\r\n                form = { display: 'form' }\r\n            }\r\n\r\n            return (\r\n                <div style={{ overflow: 'scroll' }} className=\"hide-scrollbar\">\r\n                    <FormEdit\r\n                        form={form}\r\n                        onSaveComponent={(component) => this.saveComponent(component)}\r\n                        saveText=\"Save\"\r\n                        saveForm={(form) => this.saveForm(form)}\r\n                    />\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default FrmEdit;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Formio\\FormEdit\\Form.jsx",["138","139","140","141","142","143","144"],"import { React, Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { FormBuilder, Form, FormEdit, FormGrid, SubmissionGrid } from 'react-formio';\r\nimport Formio from 'formiojs';\r\nimport axios from \"axios\";\r\nclass Frm extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            redirect: false,\r\n            form: {},\r\n            submission: {}\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n\r\n    onSubmit(filledForm) {\r\n\r\n\r\n        // Send a POST request\r\n        // axios({\r\n        //     method: 'post',\r\n        //     url: 'https://api.appilizer.com/api/formSubmission',\r\n        //     data: filledForm\r\n        // })\r\n        //     .then(res => {\r\n        //         console.log('Response Received')\r\n        //         console.log(res.data.Response)\r\n        //         this.setState({\r\n        //             redirect: true,\r\n        //             submission: res.data.Response\r\n        //         })\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err)\r\n        //     })\r\n\r\n        this.setState({\r\n\r\n            submission: filledForm\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<Form form={this.props.form} onSubmit={(form) => this.onSubmit(form)} submission={this.state.submission} />);\r\n    }\r\n}\r\n\r\nexport default Frm;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Modals\\AddNewProjectModal.jsx",["145","146","147","148"],"\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Accordion, Card, Button, Modal } from 'react-bootstrap';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport '../style.css'\r\n\r\n\r\nexport default function Example() {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n           </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n          </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n          </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n",["149","150"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\FormView.jsx",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\postRequests.js",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\url.js",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\GoalAccordian.jsx",["151","152","153","154"],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\ProjectAccordian.jsx",["155","156","157","158","159"],"import React, { Component } from 'react';\r\nimport { Accordion, Card, Button, Modal } from 'react-bootstrap';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport '../style.css'\r\n\r\n\r\n\r\nclass ProjectAccordian extends Component {\r\n    // Need To pass in props  1: program 2:handleChangeActiveProjectListItem 3:handleChangeActiveProjectListItem 4:activeListProgramId 5:addProject\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isActive: true,\r\n            program: this.props.program,\r\n            showModal: false,\r\n            objectiveInputModal: '',\r\n\r\n        }\r\n\r\n        this.handleObjectiveClick = this.handleObjectiveClick.bind(this);\r\n        this.handleAddNewObjective = this.handleAddNewObjective.bind(this);\r\n        this.handleAccordianClick = this.handleAccordianClick.bind(this);\r\n        this.getDefaultActiveKey = this.getDefaultActiveKey.bind(this);\r\n        this.handleCross = this.handleCross.bind(this)\r\n\r\n    }\r\n\r\n    handleAccordianClick(event) {\r\n        event.stopPropagation()\r\n        let activeStatus = (this.state.isActive) ? false : true\r\n        this.setState({ isActive: activeStatus })\r\n\r\n    }\r\n\r\n\r\n    handleObjectiveClick(event, obj) {\r\n        event.stopPropagation()\r\n        var goal = this.props.goal\r\n        var project = this.props.project\r\n        var program = this.props.program\r\n        var data = {\r\n            goal: goal,\r\n            project: project,\r\n            program: program,\r\n            objective: obj\r\n        }\r\n        this.props.changeObjective(data)\r\n        //this.props.changeActiveObjective(obj._id)\r\n    }\r\n\r\n\r\n    handleAddNewObjectiveClick(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: true })\r\n\r\n    }\r\n\r\n    handleAddNewObjective(event) {\r\n        event.stopPropagation()\r\n\r\n        let goal = this.props.goal\r\n        let project = this.props.project\r\n        let program = this.props.program\r\n        let objective = this.state.objectiveInputModal\r\n        var data = {\r\n            program: program,\r\n            goal: goal,\r\n            project: project,\r\n            objective: objective\r\n        }\r\n        this.props.addObjective(data)\r\n        this.setState({ showModal: false })\r\n\r\n    }\r\n\r\n    handleClose(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleCross() {\r\n        this.setState({ showModal: false })\r\n\r\n    }\r\n\r\n    ListItemClass(listItemId) {\r\n\r\n        return ((listItemId == this.props.activeObjectiveId) ? 'blue-text-color' : '')\r\n\r\n    }\r\n\r\n    getDefaultActiveKey(programId) {\r\n\r\n        return ((programId === this.props.activeListProgramId) ? \"0\" : \"1\")\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={this.state.showModal} onHide={this.handleCross}>\r\n                    <Modal.Header >\r\n                        <Modal.Title>Add Objective</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"round-corners\"\r\n                            placeholder=\"Add Objective Title\"\r\n                            onChange={(e) => { e.stopPropagation(); this.setState({ objectiveInputModal: e.target.value }) }}\r\n                            onClick={(e) => { e.stopPropagation() }}\r\n\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={(e) => this.handleClose(e)}>\r\n                            Close\r\n                       </Button>\r\n                        <Button variant=\"primary\" onClick={(e) => this.handleAddNewObjective(e)} >\r\n                            Add\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                {// Accordian\r\n                }\r\n                <Accordion id=\"projectAccord\" key=\"projectAccord\" defaultActiveKey=\"0\" style={{}} onClick={(event) => this.handleAccordianClick(event)} >\r\n                    <Card >\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" style={{\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n                            padding: '3% 2%'\r\n                        }} >\r\n                            <div className=\"cut-text\" data-tip={this.props.project.name} >\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n\r\n                                {\r\n                                    // <i className=\"fas fa-project-diagram\" aria-hidden=\"true\" style={{ color: 'black', fontWeight: 'bold' }} ></i>\r\n                                }\r\n\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {\r\n                                    (this.state.isActive) ?\r\n                                        <div style={{ display: 'inline' }}> <i className=\"fas fa-angle-down\" style={{ margin: '2%' }}></i></div> :\r\n                                        <div style={{ display: 'inline' }}> <i className=\"fas fa-angle-right\" style={{ margin: '2%' }}></i></div>\r\n                                }\r\n\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n\r\n\r\n                                {this.props.project.name}\r\n                                <ReactTooltip place=\"right\" type=\"dark\" effect=\"float\" />\r\n\r\n                            </div>\r\n                            {\r\n                                (this.props.project.objectives.length > 0) ?\r\n                                    <div className=\"add-new-objective-div\">\r\n                                        <a onClick={(event) => this.handleAddNewObjectiveClick(event)} style={{ display: 'inline' }}> <i className=\"fas fa-plus\" aria-hidden=\"true\" ></i></a>\r\n                                    </div> : ''\r\n\r\n                            }\r\n\r\n\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body style={{ padding: '1%' }}>\r\n                                <ul>\r\n                                    {\r\n                                        this.props.project.objectives.map(obj => {\r\n                                            {\r\n                                                // Concatenating id of project with program id // can be incorporated to with programid\r\n                                                // var listItemId = obj._id.toString() + this.props.project._id.toString()\r\n\r\n                                            }\r\n                                            return (<li key={obj._id} id={obj._id} className={this.ListItemClass(obj._id)} onClick={(event) => this.handleObjectiveClick(event, obj)} >\r\n\r\n                                                <i className=\"fa fa-object-group\" aria-hidden=\"true\" style={{ fontWeight: 'bold' }}></i>  {'\\u00A0'} {obj.name}\r\n                                            </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n\r\n\r\n                                </ul>\r\n\r\n                                {\r\n\r\n                                    (this.props.project.objectives.length == 0) ?\r\n                                        <div className=\"add-new-objective-div-text\">\r\n                                            <a onClick={(event) => this.handleAddNewObjectiveClick(event)}> <i className=\"fas fa-plus\" aria-hidden=\"true\" ></i>Add Objective</a>\r\n                                        </div> : ''\r\n\r\n\r\n                                }\r\n\r\n\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProjectAccordian;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\apiRequests\\getRequests.js",[],"C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\components\\Accordians\\KpiAccordian.jsx",["160"],"import React, { Component } from 'react';\r\nimport { Accordion, Card } from 'react-bootstrap'\r\nimport { FormEdit, Form } from 'react-formio';\r\nimport FormView from '../../views/FormView'\r\nimport '../style.css'\r\n\r\nclass KpiAccordian extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isActive: false,\r\n            isUpdate: false\r\n\r\n        }\r\n\r\n        this.handleAccordianClick = this.handleAccordianClick.bind(this);\r\n        this.saveForm = this.saveForm.bind(this)\r\n        this.handleSetUpdateFlag = this.handleSetUpdateFlag.bind(this)\r\n        this.handleUnsetUpdateFlag = this.handleUnsetUpdateFlag.bind(this)\r\n\r\n    }\r\n\r\n    handleAccordianClick(event) {\r\n        event.stopPropagation()\r\n        let activeStatus = (this.state.isActive) ? false : true\r\n        this.setState({ isActive: activeStatus })\r\n    }\r\n\r\n    saveForm(form) {\r\n\r\n        var { program, project, goal, objective } = this.props.data\r\n        var kpi = this.props.kpi\r\n        // To Much Information\r\n        var newData = {\r\n            programId: program._id,\r\n            projectId: project._id,\r\n            goalId: goal._id,\r\n            objectiveId: objective._id,\r\n            kpiId: kpi._id,\r\n            formDefinition: form,\r\n            program: program,\r\n            project: project,\r\n            goal: goal,\r\n            objective: objective,\r\n            kpi: kpi\r\n        }\r\n        this.props.saveKpiForm(newData)\r\n        this.handleUnsetUpdateFlag()\r\n    }\r\n    SubmitForm(form) {\r\n        console.log('I have submitted Form')\r\n        console.log(form)\r\n    }\r\n\r\n    handleSetUpdateFlag() {\r\n        console.log('I am about to set Update Flag')\r\n        this.setState({ isUpdate: true })\r\n    }\r\n\r\n    handleUnsetUpdateFlag() {\r\n        console.log('I am about to unset Update Flag')\r\n        this.setState({ isUpdate: false })\r\n    }\r\n\r\n\r\n    // checks if an object is empty\r\n    isEmpty(obj) {\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    render() {\r\n\r\n        var editFormDefinition = (this.props.kpi.hasOwnProperty('formDefinition')) ? this.props.kpi.formDefinition : { display: 'form' }\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <Accordion defaultActiveKey=\"1\" style={{ marginBottom: '1%' }}>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" style={{ backgroundColor: 'rgba(0, 0, 0, 0.06)' }} onClick={(event) => this.handleAccordianClick(event)}>\r\n                            <div style={{ textAlign: 'left', fontWeight: '500' }}>\r\n                                <i className=\"fab fa-wpforms\" style={{ color: 'black', fontWeight: '500' }}></i>\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {'\\u00A0'}\r\n                                {this.props.kpi.name}\r\n                                {\r\n                                    (this.state.isActive) ?\r\n                                        <div style={{\r\n                                            display: 'inline-block',\r\n                                            float: 'right'\r\n                                        }}> <i className=\"fas fa-angle-down\" style={{ margin: '2%' }}></i></div> :\r\n                                        <div style={{\r\n                                            display: 'inline-block',\r\n                                            float: 'right'\r\n                                        }}> <i className=\"fas fa-angle-right\" style={{ margin: '2%' }}></i></div>\r\n\r\n                                }\r\n                            </div>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                <div style={{ overflow: 'scroll', marginTop: '1%' }} className=\"hide-scrollbar\">\r\n                                    {\r\n\r\n\r\n                                        (this.props.kpi.hasOwnProperty('formDefinition') && !this.state.isUpdate) ? <FormView kpi={this.props.kpi} setUpdateFlag={this.handleSetUpdateFlag} /> : <FormEdit\r\n                                            form={editFormDefinition}\r\n                                            onSaveComponent={(component) => this.saveComponent(component)}\r\n                                            saveText=\"Save\"\r\n                                            saveForm={(form) => this.saveForm(form)}\r\n                                        />\r\n\r\n                                    }\r\n\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KpiAccordian;","C:\\Users\\ladmin\\Desktop\\Monitor Proj\\my-app\\src\\views\\AddFirstKpi.jsx",["161"],"import React, { Component } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nclass AddFirstKpi extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showModal: false,\r\n            kpiInputModal: ''\r\n        }\r\n\r\n        this.handleAddNewKpi = this.handleAddNewKpi.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n        this.handleCross = this.handleCross.bind(this)\r\n        this.handleAddNewKpiClick = this.handleAddNewKpiClick.bind(this)\r\n\r\n    }\r\n\r\n    handleAddNewKpi(event) {\r\n        event.stopPropagation()\r\n        // data contains program, project, goal and objective\r\n        var data = this.props.data;\r\n        data.kpi = this.state.kpiInputModal;\r\n        this.props.addKpi(data)\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleClose(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleCross() {\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    handleAddNewKpiClick(event) {\r\n        event.stopPropagation()\r\n        this.setState({ showModal: true })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={this.state.showModal} onHide={this.handleCross}>\r\n                    <Modal.Header >\r\n                        <Modal.Title>Add KPI</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"round-corners\"\r\n                            placeholder=\"Add KPI Title\"\r\n                            onChange={(e) => { e.stopPropagation(); this.setState({ kpiInputModal: e.target.value }) }}\r\n                            onClick={(e) => { e.stopPropagation() }}\r\n\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={(e) => this.handleClose(e)}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={(e) => this.handleAddNewKpi(e)} >\r\n                            Add\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <div className=\"add-first-kpi-div\">\r\n                    <div className=\"add-first-kpi\" style={{ textAlign: 'center' }}><a style={{ display: 'inline' }}> <i className=\"fas fa-plus add-first-kpi\" aria-hidden=\"true\" onClick={(event) => this.handleAddNewKpiClick(event)}></i></a> </div>\r\n                    <div className=\"add-first-kpi-text\" style={{ textAlign: 'center' }}>Add your first Key Performance Index (KPI)</div>\r\n                </div>\r\n\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddFirstKpi;",{"ruleId":"162","severity":1,"message":"163","line":5,"column":8,"nodeType":"164","messageId":"165","endLine":5,"endColumn":23},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"162","severity":1,"message":"170","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":13},{"ruleId":"162","severity":1,"message":"171","line":9,"column":27,"nodeType":"164","messageId":"165","endLine":9,"endColumn":33},{"ruleId":"162","severity":1,"message":"172","line":9,"column":35,"nodeType":"164","messageId":"165","endLine":9,"endColumn":41},{"ruleId":"162","severity":1,"message":"173","line":9,"column":43,"nodeType":"164","messageId":"165","endLine":9,"endColumn":48},{"ruleId":"162","severity":1,"message":"174","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":215,"column":24,"nodeType":"177","messageId":"178","endLine":215,"endColumn":26},{"ruleId":"175","severity":1,"message":"176","line":245,"column":24,"nodeType":"177","messageId":"178","endLine":245,"endColumn":26},{"ruleId":"175","severity":1,"message":"176","line":247,"column":27,"nodeType":"177","messageId":"178","endLine":247,"endColumn":29},{"ruleId":"175","severity":1,"message":"176","line":283,"column":22,"nodeType":"177","messageId":"178","endLine":283,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":285,"column":25,"nodeType":"177","messageId":"178","endLine":285,"endColumn":27},{"ruleId":"175","severity":1,"message":"176","line":287,"column":30,"nodeType":"177","messageId":"178","endLine":287,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":336,"column":24,"nodeType":"177","messageId":"178","endLine":336,"endColumn":26},{"ruleId":"175","severity":1,"message":"176","line":338,"column":27,"nodeType":"177","messageId":"178","endLine":338,"endColumn":29},{"ruleId":"175","severity":1,"message":"176","line":340,"column":32,"nodeType":"177","messageId":"178","endLine":340,"endColumn":34},{"ruleId":"175","severity":1,"message":"176","line":343,"column":35,"nodeType":"177","messageId":"178","endLine":343,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":390,"column":24,"nodeType":"177","messageId":"178","endLine":390,"endColumn":26},{"ruleId":"175","severity":1,"message":"176","line":392,"column":27,"nodeType":"177","messageId":"178","endLine":392,"endColumn":29},{"ruleId":"175","severity":1,"message":"176","line":394,"column":32,"nodeType":"177","messageId":"178","endLine":394,"endColumn":34},{"ruleId":"175","severity":1,"message":"176","line":397,"column":35,"nodeType":"177","messageId":"178","endLine":397,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":399,"column":39,"nodeType":"177","messageId":"178","endLine":399,"endColumn":41},{"ruleId":"166","replacedBy":"179"},{"ruleId":"168","replacedBy":"180"},{"ruleId":"162","severity":1,"message":"181","line":2,"column":27,"nodeType":"164","messageId":"165","endLine":2,"endColumn":33},{"ruleId":"162","severity":1,"message":"182","line":2,"column":35,"nodeType":"164","messageId":"165","endLine":2,"endColumn":40},{"ruleId":"162","severity":1,"message":"183","line":7,"column":8,"nodeType":"164","messageId":"165","endLine":7,"endColumn":21},{"ruleId":"184","severity":1,"message":"185","line":92,"column":49,"nodeType":"186","endLine":92,"endColumn":192},{"ruleId":"175","severity":1,"message":"176","line":87,"column":44,"nodeType":"177","messageId":"178","endLine":87,"endColumn":46},{"ruleId":"162","severity":1,"message":"187","line":3,"column":38,"nodeType":"164","messageId":"165","endLine":3,"endColumn":49},{"ruleId":"162","severity":1,"message":"188","line":4,"column":10,"nodeType":"164","messageId":"165","endLine":4,"endColumn":19},{"ruleId":"162","severity":1,"message":"189","line":4,"column":21,"nodeType":"164","messageId":"165","endLine":4,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":136,"column":37,"nodeType":"186","endLine":136,"endColumn":125},{"ruleId":"175","severity":1,"message":"176","line":154,"column":70,"nodeType":"177","messageId":"178","endLine":154,"endColumn":72},{"ruleId":"184","severity":1,"message":"185","line":155,"column":41,"nodeType":"186","endLine":155,"endColumn":99},{"ruleId":"162","severity":1,"message":"190","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":14},{"ruleId":"162","severity":1,"message":"170","line":5,"column":8,"nodeType":"164","messageId":"165","endLine":5,"endColumn":13},{"ruleId":"162","severity":1,"message":"191","line":6,"column":10,"nodeType":"164","messageId":"165","endLine":6,"endColumn":18},{"ruleId":"162","severity":1,"message":"192","line":2,"column":8,"nodeType":"164","messageId":"165","endLine":2,"endColumn":16},{"ruleId":"162","severity":1,"message":"193","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":21},{"ruleId":"162","severity":1,"message":"194","line":3,"column":29,"nodeType":"164","messageId":"165","endLine":3,"endColumn":37},{"ruleId":"162","severity":1,"message":"195","line":3,"column":39,"nodeType":"164","messageId":"165","endLine":3,"endColumn":47},{"ruleId":"162","severity":1,"message":"196","line":3,"column":49,"nodeType":"164","messageId":"165","endLine":3,"endColumn":63},{"ruleId":"162","severity":1,"message":"190","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":14},{"ruleId":"162","severity":1,"message":"170","line":5,"column":8,"nodeType":"164","messageId":"165","endLine":5,"endColumn":13},{"ruleId":"162","severity":1,"message":"197","line":2,"column":27,"nodeType":"164","messageId":"165","endLine":2,"endColumn":36},{"ruleId":"162","severity":1,"message":"187","line":2,"column":38,"nodeType":"164","messageId":"165","endLine":2,"endColumn":49},{"ruleId":"162","severity":1,"message":"188","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":19},{"ruleId":"162","severity":1,"message":"189","line":3,"column":21,"nodeType":"164","messageId":"165","endLine":3,"endColumn":25},{"ruleId":"166","replacedBy":"198"},{"ruleId":"168","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":130,"column":135,"nodeType":"202","endLine":130,"endColumn":155},{"ruleId":"184","severity":1,"message":"185","line":162,"column":37,"nodeType":"186","endLine":162,"endColumn":128},{"ruleId":"175","severity":1,"message":"176","line":193,"column":70,"nodeType":"177","messageId":"178","endLine":193,"endColumn":72},{"ruleId":"184","severity":1,"message":"185","line":195,"column":45,"nodeType":"186","endLine":195,"endColumn":106},{"ruleId":"175","severity":1,"message":"176","line":91,"column":29,"nodeType":"177","messageId":"178","endLine":91,"endColumn":31},{"ruleId":"184","severity":1,"message":"185","line":167,"column":41,"nodeType":"186","endLine":167,"endColumn":134},{"ruleId":"203","severity":1,"message":"204","line":179,"column":45,"nodeType":"205","messageId":"206","endLine":183,"endColumn":46},{"ruleId":"175","severity":1,"message":"176","line":197,"column":75,"nodeType":"177","messageId":"178","endLine":197,"endColumn":77},{"ruleId":"184","severity":1,"message":"185","line":199,"column":45,"nodeType":"186","endLine":199,"endColumn":108},{"ruleId":"162","severity":1,"message":"207","line":3,"column":20,"nodeType":"164","messageId":"165","endLine":3,"endColumn":24},{"ruleId":"184","severity":1,"message":"185","line":70,"column":84,"nodeType":"186","endLine":70,"endColumn":117},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["208"],"no-negated-in-lhs",["209"],"'axios' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'saveForm' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["208"],["209"],"'Button' is defined but never used.","'Modal' is defined but never used.","'GoalAccordian' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useCallback' is defined but never used.","'Accordion' is defined but never used.","'Card' is defined but never used.","'Formio' is defined but never used.","'Redirect' is defined but never used.","'ReactDOM' is defined but never used.","'FormBuilder' is defined but never used.","'FormEdit' is defined but never used.","'FormGrid' is defined but never used.","'SubmissionGrid' is defined but never used.","'useEffect' is defined but never used.",["208"],["209"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]